" Just as a reminder of some commands, in case you forget...
"
" GENERAL:
" ]c / [c used to jump between git changes in file
" CTRL + N and CTRL + P for autocomplete
"
" CTAGS:
" CTRL + ] to find next def
" CTRL + t to go home
" g] for list of matches
" :tags to show matches used so far

set nocompatible              " be iMproved, required
filetype off                  " required

" ------------------ https://github.com/junegunn/vim-plug : -------------------
" Install plugs:    :PlugInstall
" Update plugs:     :PlugUpdate
" Update plug:      :PlugUpgrade
" Delete old plugs  :PlugClean

if has('nvim')
  call plug#begin(stdpath('data') . '/plugged')
else
  call plug#begin('~/.vim/plugged')
endif

Plug 'scrooloose/syntastic' " Syntax checker
Plug 'haya14busa/incsearch.vim' " Incremental search
Plug 'airblade/vim-gitgutter' " Git diffs inline
Plug 'altercation/vim-colors-solarized' " Solarized
Plug 'tpope/vim-fugitive' " Git wrappers for vim
Plug 'christoomey/vim-tmux-navigator' " Vim like controls for jumping between windows
Plug 'fatih/vim-go' " Utilities for go + vim
Plug 'dart-lang/dart-vim-plugin' " Dart Language
Plug 'rust-lang/rust.vim' " Rust language
Plug 'cespare/vim-toml' " TOML highlighting
" Plug 'Valloric/YouCompleteMe' " This one's a bit big
Plug 'neoclide/coc.nvim', {'branch': 'release'} " Because YCM is killing me.
" All of your Plugins must be added before the following line
call plug#end()

filetype plugin indent on    " required

" ----------------------------------------------
" ----------------- Toggle ---------------------

" Here, we have the ability to actvate (or deactivate) certain vim plugins.

" YouCompleteMe -- "Commented" == "Enabled"
" let g:loaded_youcompleteme = 1
let g:ycm_filetype_blacklist = {
      \ 'go': 1,
      \ 'cpp' : 1,
      \ 'c' : 1,
      \ 'tsx' : 1,
      \ 'rs': 1,
      \}

" Not necessary, I think. I believe rust-analyzer is now the default
" with YCM...
" let g:ycm_global_ycm_extra_conf = '~/.config/nvim/global_extra_conf.py'

" Syntastic -- "Commented" == "Enabled"
" autocmd VimEnter * SyntasticToggleMode " disable syntastic by default

" ----------------------------------------------
" --------------- COC : ------------------------

" :CocInfo
" :CocList

""""""""""""""
" CoC Config
""""""""""""""
" Use tab for trigger completion with characters ahead and navigate.
inoremap <silent><expr> <TAB>
      \ pumvisible() ? "\<C-n>" :
      \ <SID>check_back_space() ? "\<TAB>" :
      \ coc#refresh()
inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"

function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction

" Make <CR> auto-select the first completion item and notify coc.nvim to
" format on enter, <cr> could be remapped by other vim plugin
" inoremap <silent><expr> <cr> pumvisible() ? coc#_select_confirm() : "\<C-g>u\<CR>\<c-r>=coc#on_enter()\<CR>"

" Use K (ahem, 'shift + k') to show documentation in preview window.
nnoremap <silent> K :call <SID>show_documentation()<CR>

function! s:show_documentation()
  if (index(['vim','help'], &filetype) >= 0)
    execute 'h '.expand('<cword>')
  elseif (coc#rpc#ready())
    call CocActionAsync('doHover')
  else
    execute '!' . &keywordprg . " " . expand('<cword>')
  endif
endfunction

" Use `[g` and `]g` to navigate diagnostics
" Use `:CocDiagnostics` to get all diagnostics of current buffer in location list.
nmap <silent> [g <Plug>(coc-diagnostic-prev)
nmap <silent> ]g <Plug>(coc-diagnostic-next)

" ----------------------------------------------
" --------------- vim-gitgutter: ---------------
set signcolumn=yes
let g:gitgutter_max_signs = 10000
let g:gitgutter_diff_base = ''
let g:gitgutter_sign_added = '++'
let g:gitgutter_sign_modified = '~~'
let g:gitgutter_sign_removed = '--'
set updatetime=100

" This is necessary to avoid making the gutter gray
autocmd ColorScheme * highlight! link SignColumn LineNr

" If you press Ctl-g when state is... : Gitgutter shows you...
" 0 : Diff
" 1 : Diff upstream
" 2 : Turn origin/master
let g:smklein_gitgutter_state = 1
let g:gitgutter_grep=''

function! ChangeGitgutterDiff()
  GitGutterEnable
  GitGutterSignsEnable
  if g:smklein_gitgutter_state == 0
    let g:gitgutter_diff_base = ''
    let g:smklein_gitgutter_state = 1
  elseif g:smklein_gitgutter_state == 1
    let g:gitgutter_diff_base = 'HEAD~1'
    let g:smklein_gitgutter_state = 2
  elseif g:smklein_gitgutter_state == 2
    let g:gitgutter_diff_base = 'origin/main'
    let g:smklein_gitgutter_state = 0
  endif
endfunction

" Control-g to switch the diff we are viewing
nnoremap <C-g> :call ChangeGitgutterDiff() \| :w<CR>
" ----------------------------------------------


" ------------------ ctags ---------------------
set tags=tags;/
" -------------- YouCompleteMe -----------------
" To debug:  :YcmDebugInfo
let g:ycm_confirm_extra_conf = 0
let g:ycm_always_populate_location_list = 1
set completeopt=menu,preview
let g:ycm_register_as_syntastic_checker = 0

" ----------------------------------------------
" ----------------- vim-rust -------------------

" let g:rustfmt_autosave = 1

" ----------------------------------------------
" ----------------- vim-go ---------------------
" use goimports for formatting
let g:go_fmt_command = "gofmt"
let g:go_fmt_autosave = 0

" I'm doing the go_fmtting myself. I don't want vim-go to override my vimrc
" variables.
set autoread
au BufWritePost *.go :silent execute "!gofmt -w %" | redraw!

" The old regex engine is way faster
set re=1
set ttyfast
set lazyredraw

" turn highlighting on
let g:go_highlight_functions = 1
let g:go_highlight_methods = 1
let g:go_highlight_structs = 1
let g:go_highlight_operators = 1
let g:go_highlight_build_constraints = 1

" syntastic  VS  vim-go
let g:syntastic_go_checkers = ['go', 'govet', 'errcheck']

" Open go doc in vertical window, horizontal, or tab
let mapleader=","
au Filetype go nnoremap <leader>e :vsp <CR>:exe "GoDef" <CR>
au Filetype go nnoremap <leader>s :sp <CR>:exe "GoDef"<CR>
" ----------------------------------------------
" ---------------- syntastic -------------------
let g:syntastic_mode_map = { 'passive_filetypes': ['rust', 'vim'] }
let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 2  " Do not auto-open, but DO auto-close.
let g:syntastic_aggregate_errors = 1  " I want as many errors as possible.
let g:syntastic_check_on_open = 1  " Check on first load and on save.
let g:syntastic_check_on_wq = 0  " Don't bother checking when we quit.
let g:syntastic_rust_checkers = ['cargo']

" ----------------------------------------------
" ---------------- incsearch -------------------
" Incsearch, highlight while searching.
let uname = system("uname -s")
if uname !~ "Darwin"
  " For some reason, this does not work on Mac.
  map /  <Plug>(incsearch-forward)
  map ?  <Plug>(incsearch-backward)
  map g/ <Plug>(incsearch-stay)
endif
" ----------------------------------------------

" ------------ Status, ruler, etc --------------
" Ensure that we are in modern vim mode, not backwards-compatible vi mode
set nocompatible
set backspace=indent,eol,start

" Helpful information: cursor position in bottom right, line numbers on left
set ruler
" Turning off line numbers for now...
" set number

" Enable filetype detection and syntax hilighting
syntax on
filetype on
filetype indent on
filetype plugin on

" Show multicharacter commands as they are being typed
set showcmd

" Trims end of line whitespace
fun! TrimWhitespace()
    let l:save_cursor = getpos('.')
    %s/\s\+$//e
    call setpos('.', l:save_cursor)
endfun

" In visual mode, Ctrl+c to copy
vmap <C-c> :w! ~/.vbuf<CR>
" In normal mode, Ctrl+p to paste
nmap <C-p> :r ~/.vbuf<CR>

set pastetoggle=<F5>
set runtimepath+=$GOROOT/misc/vim

" Always show filename...
set statusline+=%F           "file name
set statusline+=%=          "separator

" Syntastic-specific
set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*

set statusline+=[Diff\ 
set statusline+=%{g:gitgutter_diff_base}
set statusline+=],

set statusline+=%c          "column number
set statusline+=,\[%l/%L\]  "row number / total rows
set laststatus=2
" ----------------------------------------------


" --------------- split window -----------------
" Quick way to open windows.
" Recall:
" Horiz Split: Ctrl+w, s    or    :sp filename
" Verti Split: Ctrl+w, v    or    :vs filename
" Close Split: Ctrl+w, q
" Go to new file: :e filename. Alternately, ":e ." to go to directory view.
map <C-E> <C-W>v
map <C-S> <C-W>s

" Quick way to switch windows.
map <C-J> <C-W>j
map <C-H> <C-W>h
map <C-K> <C-W>k
map <C-L> <C-W>l

" ---------------- Vim / tmux ------------------
let g:tmux_navigator_save_on_switch = 1

"let g:tmux_navigator_no_mappings = 1
"nnoremap <silent> <C-H> :TmuxNavigateLeft<cr>
"nnoremap <silent> <C-J> :TmuxNavigateDown<cr>
"nnoremap <silent> <C-K> :TmuxNavigateUp<cr>
"nnoremap <silent> <C-L> :TmuxNavigateRight<cr>
" nnoremap <silent> {Previous-Mapping} :TmuxNavigatePrevious<cr>
" ----------------------------------------------


" Quick way to close windows.
map <C-q> :q<CR>

set splitbelow
set splitright

" Makes tab completion better when opening stuff.
set wildmenu

" :Shell -l -la
function! s:ExecuteInShell(command)
  let command = join(map(split(a:command), 'expand(v:val)'))
  let winnr = bufwinnr('^' . command . '$')
  silent! execute  winnr < 0 ? 'botright new ' . fnameescape(command) : winnr . 'wincmd w'
  setlocal buftype=nowrite bufhidden=wipe nobuflisted noswapfile nowrap number
  echo 'Execute ' . command . '...'
  silent! execute 'silent %!'. command
  silent! execute 'resize ' . line('$')
  silent! redraw
  silent! execute 'au BufUnload <buffer> execute bufwinnr(' . bufnr('#') . ') . ''wincmd w'''
  silent! execute 'nnoremap <silent> <buffer> <LocalLeader>r :call <SID>ExecuteInShell(''' . command . ''')<CR>'
  echo 'Shell command ' . command . ' executed.'
endfunction
command! -complete=shellcmd -nargs=+ Shell call s:ExecuteInShell(<q-args>)

" ----------------------------------------------

" Highlight matching angle brackets
set matchpairs+=<:>

" Highlight TODOs and other important keywords
augroup HighlightTODO
    autocmd!
    autocmd WinEnter,VimEnter * :silent! call matchadd('Todo',
          \    'TODO\|FIXME\|NOTE\|BUG\|XXX', -1)
augroup END

augroup HighlightTODO
    autocmd!
    autocmd WinEnter,VimEnter *.txt :silent! call matchadd('Todo',
          \    '\$.*', -1)
augroup END


" Settings for Solarized
syntax enable
set background=dark
" Make .txt/.rst files light...
autocmd BufRead,BufNewFile *.txt,*rst set background=light
" set term=tmux-256color
let g:solarized_termcolors = 256
let g:solarized_visibility = "high"
let g:solarized_contrast = "high"
let g:solarized_underline = 1
silent! colorscheme solarized

set cursorline
"hi clear CursorLine
"hi CursorLine gui=underline
hi String ctermfg=209
hi Comment gui=bold term=bold ctermfg=185
hi Identifier ctermfg=33
hi Function ctermfg=87 gui=bold

" colorscheme zellner
" Admittedly, I couldn't disable autofolding... I just used a high level...
let g:rust_fold = 1
set foldlevelstart=2
set foldmethod=syntax
" More folding (locally, by one level)
nnoremap zj zc
" " More folding (globally, by all levels)
nnoremap zh zM
" " Less folding (locally, by one level)
nnoremap zk zo
" " Less folding (globally, by all levels)
nnoremap zl zR
set nofoldenable

" Use control b to open current file in Chrome (B for Browser)
nnoremap <c-b> :exe '!chromium %'<CR>

" move vertically by visual line
nnoremap j gj
nnoremap k gk

"noremap <Up> <NOP>
"noremap <Down> <NOP>
"noremap <Left> <NOP>
"noremap <Right> <NOP>

inoremap <C-s> ✔
inoremap <C-x> ✘
inoremap <C-d> ~~~

set incsearch
set hlsearch
set ignorecase

command! Nonum set norelativenumber | set nonumber
command! Yesnum set relativenumber | set number

" Highlight trailing whitspace
highlight ExtraWhitespace ctermbg=red guibg=red
match ExtraWhitespace /\s\+$/
autocmd BufWinEnter * match ExtraWhitespace /\s\+$/
autocmd InsertEnter * match ExtraWhitespace /\s\+\%#\@<!$/
autocmd InsertLeave * match ExtraWhitespace /\s\+$/
autocmd BufWinLeave * call clearmatches()

" Highlight anything more than 80 characters
" match Error '\%>80v.\+'
highlight ColorColumn ctermbg=DarkMagenta

let g:tabs_are_tabs=0
let g:tab_size=2

function SetFileC()
  set matchpairs+=<:>
  silent SyntasticToggleMode
  call matchadd('ColorColumn', '\%101v.\+', 100)
  set textwidth=100
  let g:tabs_are_tabs=0
  let g:tab_size=2
  call DoTabSettings()
endfunction

function SetFilePython()
  silent SyntasticToggleMode
  call matchadd('ColorColumn', '\%81v.\+', 100)
  let g:tabs_are_tabs=0
  let g:tab_size=4
  call DoTabSettings()
endfunction

function SetFileText()
  " Match indentation automatically (cross 80 chars, use prior indent).
  set autoindent
  " Automatic word wrapping to 80 characters
  set textwidth=80
endfunction

function SetFileGo()
  set textwidth=100
  let g:tabs_are_tabs=1
  let g:tab_size=4
  call DoTabSettings()
endfunction

function SetFileRust()
  silent SyntasticToggleMode
  set textwidth=80
  let g:tabs_are_tabs=0
  let g:tab_size=4
  call DoTabSettings()
endfunction

function SetFileTypeScript()
  syntax off
  set re=0
endfunction

" Good to know about autcmd: These commands run AFTER the entire .vimrc file is
" processed. Just a heads up.
autocmd BufNewFile,BufRead *.java
      \ call matchadd('ColorColumn', '\%101v.\+', 100)
autocmd BufNewFile,BufRead *.cc,*.cpp,*.c,*.h
      \ call SetFileC()
autocmd BufNewFile,BufRead *.py
      \ call SetFilePython()
autocmd BufRead,BufNewFile *.scons
      \ set filetype=python
autocmd BufNewFile,BufRead *.txt,*.md
      \ call SetFileText()
autocmd BufNewFile,BufRead *.go
      \ call SetFileGo()
autocmd BufNewFile,BufRead *.rs
      \ call SetFileRust()
autocmd BufNewFile,BufRead *.ts
      \ call SetFileTypeScript()

" Required to be set as empty for a clean background with tmux / solarized.
set t_ut=

" Tabs, trailing spaces
function DoTabSettings()
  let &tabstop=g:tab_size
  let &shiftwidth=g:tab_size
  let &softtabstop=g:tab_size
  if g:tabs_are_tabs
    " Tabs are Tabs
    set noexpandtab
    set nolist
  else
    " Tabs are Spaces
    set expandtab
    set listchars=tab:>-,trail:_
    set list
  endif
endfunction

" Call with default settings
call DoTabSettings()

