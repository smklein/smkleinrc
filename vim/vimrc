" Just as a reminder of some commands, in case you forget...
"
" GENERAL:
" ]c / [c used to jump between git changes in file
" CTRL + N and CTRL + P for autocomplete
"
" CTAGS:
" CTRL + ] to find next def
" CTRL + t to go home
" g] for list of matches
" :tags to show matches used so far

set nocompatible              " be iMproved, required
filetype off                  " required

" --------------- vim-gitgutter: ---------------
set shell=/bin/bash
let g:gitgutter_sign_column_always = 1
let g:gitgutter_diff_args = ''
let g:gitgutter_sign_added = '++'
let g:gitgutter_sign_modified = '~~'
let g:gitgutter_sign_removed = '--'

function ChangeGitgutterDiff()
  if g:gitgutter_diff_args == ''
    let g:gitgutter_diff_args = 'origin/master'
  else
    let g:gitgutter_diff_args = ''
  endif
endfunction

" Control-s to switch the diff we are viewing
nnoremap <C-g> :call ChangeGitgutterDiff() \| :w<CR>
" ----------------------------------------------

" ------------------ vundle: -------------------
" To install plugins, run either
" :PluginInstall    or    vim  +PluginInstall +qall
" set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()
" alternatively, pass a path where Vundle should install plugins
" call vundle#begin('~/some/path/here')
" let Vundle manage Vundle, required
Plugin 'VundleVim/Vundle.vim'
" Keep Plugin commands between vundle#begin/end.
Plugin 'haya14busa/incsearch.vim' " Incremental search
Plugin 'airblade/vim-gitgutter' " Git diffs inline
Plugin 'altercation/vim-colors-solarized' " Solarized
Plugin 'tpope/vim-fugitive' " Git wrappers for vim
Plugin 'christoomey/vim-tmux-navigator' " Vim like controls for jumping between windows
let g:loaded_youcompleteme = 1  " XXX UNCOMMENT ME TO DISABLE YCM
Plugin 'Valloric/YouCompleteMe' " This one's a bit big
" All of your Plugins must be added before the following line
call vundle#end()            " required
filetype plugin indent on    " required
" ----------------------------------------------
" ------------------ ctags ---------------------
set tags=tags;/
" -------------- YouCompleteMe -----------------
let g:ycm_confirm_extra_conf = 0
let g:ycm_always_populate_location_list = 1
" ----------------------------------------------
" ---------------- incsearch -------------------
" Incsearch, highlight while searching.
let uname = system("uname -s")
if uname !~ "Darwin"
  " For some reason, this does not work on Mac.
  map /  <Plug>(incsearch-forward)
  map ?  <Plug>(incsearch-backward)
  map g/ <Plug>(incsearch-stay)
endif
" ----------------------------------------------

" ----------------- google ---------------------
" Google specific
if filereadable("/usr/share/vim/google/google.vim")
  source /usr/share/vim/google/google.vim
endif
" ----------------------------------------------

" ------------ Status, ruler, etc --------------
" Ensure that we are in modern vim mode, not backwards-compatible vi mode
set nocompatible
set backspace=indent,eol,start

" Helpful information: cursor position in bottom right, line numbers on left
set ruler
" Turning off line numbers for now...
" set number

" Enable filetype detection and syntax hilighting
syntax on
filetype on
filetype indent on
filetype plugin on

" Show multicharacter commands as they are being typed
set showcmd

" Trims end of line whitespace
fun! TrimWhitespace()
    let l:save_cursor = getpos('.')
    %s/\s\+$//e
    call setpos('.', l:save_cursor)
endfun

" In visual mode, Ctrl+c/p to copy paste
set clipboard=unnamedplus
vmap <C-c> "+y<CR>
vmap <C-p> "+p<CR>

set pastetoggle=<F5>
set runtimepath+=$GOROOT/misc/vim

" Always show filename...
set statusline=%f           "file name
set statusline+=%=          "separator

set statusline+=[Diff\ 
set statusline+=%{g:gitgutter_diff_args}
set statusline+=],

set statusline+=%c          "column number
set statusline+=,\[%l/%L\]  "row number / total rows
set statusline+=\ %P        "percentage of way through file
set laststatus=2
" ----------------------------------------------


" --------------- split window -----------------
" Quick way to open windows.
" Recall:
" Horiz Split: Ctrl+w, s    or    :sp filename
" Verti Split: Ctrl+w, v    or    :vs filename
" Close Split: Ctrl+w, q
" Go to new file: :e filename. Alternately, ":e ." to go to directory view.
map <C-E> <C-W>v
map <C-S> <C-W>s

" Quick way to switch windows.
map <C-J> <C-W>j
map <C-H> <C-W>h
map <C-K> <C-W>k
map <C-L> <C-W>l

" ---------------- Vim / tmux ------------------
let g:tmux_navigator_save_on_switch = 1

"let g:tmux_navigator_no_mappings = 1
"nnoremap <silent> <C-H> :TmuxNavigateLeft<cr>
"nnoremap <silent> <C-J> :TmuxNavigateDown<cr>
"nnoremap <silent> <C-K> :TmuxNavigateUp<cr>
"nnoremap <silent> <C-L> :TmuxNavigateRight<cr>
" nnoremap <silent> {Previous-Mapping} :TmuxNavigatePrevious<cr>
" ----------------------------------------------


" Quick way to close windows.
map <C-q> :q<CR>

set splitbelow
set splitright

" Makes tab completion better when opening stuff.
set wildmenu

" :Shell -l -la
function! s:ExecuteInShell(command)
  let command = join(map(split(a:command), 'expand(v:val)'))
  let winnr = bufwinnr('^' . command . '$')
  silent! execute  winnr < 0 ? 'botright new ' . fnameescape(command) : winnr . 'wincmd w'
  setlocal buftype=nowrite bufhidden=wipe nobuflisted noswapfile nowrap number
  echo 'Execute ' . command . '...'
  silent! execute 'silent %!'. command
  silent! execute 'resize ' . line('$')
  silent! redraw
  silent! execute 'au BufUnload <buffer> execute bufwinnr(' . bufnr('#') . ') . ''wincmd w'''
  silent! execute 'nnoremap <silent> <buffer> <LocalLeader>r :call <SID>ExecuteInShell(''' . command . ''')<CR>'
  echo 'Shell command ' . command . ' executed.'
endfunction
command! -complete=shellcmd -nargs=+ Shell call s:ExecuteInShell(<q-args>)

" ----------------------------------------------

" Highlight TODOs and other important keywords
augroup HighlightTODO
    autocmd!
    autocmd WinEnter,VimEnter * :silent! call matchadd('Todo',
          \    'TODO\|FIXME\|NOTE\|BUG\|XXX', -1)
augroup END

augroup HighlightTODO
    autocmd!
    autocmd WinEnter,VimEnter *.txt :silent! call matchadd('Todo',
          \    '\$.*', -1)
augroup END


" Settings for Solarized
syntax enable
set background=dark
" Make .txt/.rst files light...
autocmd BufRead,BufNewFile *.txt,*rst set background=light
set term=xterm-256color
let g:solarized_termcolors = 256
let g:solarized_visibility = "high"
let g:solarized_contrast = "high"
let g:solarized_underline = 1
silent! colorscheme solarized

set cursorline
"hi clear CursorLine
"hi CursorLine gui=underline
hi String ctermfg=209
hi Comment gui=bold term=bold ctermfg=185
hi Identifier ctermfg=33
hi Function ctermfg=87 gui=bold

" colorscheme zellner
" Admittedly, I couldn't disable autofolding... I just used a high level...
set foldlevelstart=2
set foldmethod=indent
" More folding (locally, by one level)
nnoremap zj zC
" More folding (globally, by all levels)
nnoremap zh zM
" Less folding (locally, by one level)
nnoremap zk zO
" Less folding (globally, by all levels)
nnoremap zl zR
set nofoldenable

" Use control b to open current file in Chrome (B for Browser)
nnoremap <c-b> :exe '!google-chrome %'<CR>

" move vertically by visual line
nnoremap j gj
nnoremap k gk

"noremap <Up> <NOP>
"noremap <Down> <NOP>
"noremap <Left> <NOP>
"noremap <Right> <NOP>

inoremap <C-s> ✔
inoremap <C-x> ✘
inoremap <C-d> ~~~

set incsearch
set hlsearch
set ignorecase

command! Nonum set norelativenumber | set nonumber
command! Yesnum set relativenumber | set number

" Highlight trailing whitspace
highlight ExtraWhitespace ctermbg=red guibg=red
match ExtraWhitespace /\s\+$/
autocmd BufWinEnter * match ExtraWhitespace /\s\+$/
autocmd InsertEnter * match ExtraWhitespace /\s\+\%#\@<!$/
autocmd InsertLeave * match ExtraWhitespace /\s\+$/
autocmd BufWinLeave * call clearmatches()

" Highlight anything more than 80 characters
" match Error '\%>80v.\+'
highlight ColorColumn ctermbg=DarkMagenta


let tabs_are_tabs=0
let tab_size=2

autocmd BufNewFile,BufRead *.java
      \ call matchadd('ColorColumn', '\%101v.\+', 100)
autocmd BufNewFile,BufRead *.cc,*.cpp,*.c,*.py,*.h
      \ call matchadd('ColorColumn', '\%81v.\+', 100)

au BufRead,BufNewFile *.scons set filetype=python

set t_ut=

" Tabs, trailing spaces

if tabs_are_tabs
  " Tabs are Tabs
  let &tabstop=tab_size
  let &shiftwidth=tab_size
  let &softtabstop=tab_size
  set noexpandtab
  set listchars=tab:\|\ ,trail:_
  set list
else
  " Tabs are Spaces
  let &tabstop=tab_size
  let &shiftwidth=tab_size
  let &softtabstop=tab_size
  set expandtab
  set listchars=tab:>-,trail:_
  set list
endif
