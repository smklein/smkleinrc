# ~/.bashrc: executed by bash(1) for non-login shells.
# see /usr/share/doc/bash/examples/startup-files (in the package bash-doc)
# for examples

# If not running interactively, don't do anything
case $- in
    *i*) ;;
      *) return;;
esac

# Source the first argument of include IFF it exists.
include () {
    [[ -f "$1" ]] && source "$1"
}

# XXX XXX XXX XXX INCLUDE OTHER RC FILES HERE XXX XXX XXX XXX
# This .bashrc file should be computer-agnostic!
if [ "$(uname)" == "Darwin" ]; then
  # Do something under Mac OS X platform
  include ~/smkleinrc/bash/macrc    # Full of mac-specific things
fi

# Local, should not be committed.
include ~/.googlerc
include ~/.pathrc
# XXX XXX XXX XXX END INCLUDE OTHER RC FILES XXX XXX XXX XXX

alias tmux='tmux -2'

# don't put duplicate lines or lines starting with space in the history.
# See bash(1) for more options
HISTCONTROL=ignoreboth

# append to the history file, don't overwrite it
shopt -s histappend

# for setting history length see HISTSIZE and HISTFILESIZE in bash(1)
HISTSIZE=1000000
HISTFILESIZE=1000000
shopt -s histappend
shopt -s cmdhist
HISTCONTROL=ignoredups
export HISTIGNORE="&:ls:[bf]g:exit"

# ZSH like tab completion
# XXX Disabled at the moment, because it was pissing me off
#bind 'set show-all-if-ambiguous on'
#bind 'TAB:menu-complete'

# check the window size after each command and, if necessary,
# update the values of LINES and COLUMNS.
shopt -s checkwinsize

# If set, the pattern "**" used in a pathname expansion context will
# match all files and zero or more directories and subdirectories.
#shopt -s globstar

# make less more friendly for non-text input files, see lesspipe(1)
[ -x /usr/bin/lesspipe ] && eval "$(SHELL=/bin/sh lesspipe)"

# set variable identifying the chroot you work in (used in the prompt below)
if [ -z "${debian_chroot:-}" ] && [ -r /etc/debian_chroot ]; then
    debian_chroot=$(cat /etc/debian_chroot)
fi

# set a fancy prompt (non-color, unless we know we "want" color)
case "$TERM" in
    xterm-color) color_prompt=yes;;
esac

# uncomment for a colored prompt, if the terminal has the capability; turned
# off by default to not distract the user: the focus in a terminal window
# should be on the output of commands, not on the prompt
#force_color_prompt=yes

if [ -n "$force_color_prompt" ]; then
    if [ -x /usr/bin/tput ] && tput setaf 1 >&/dev/null; then
	# We have color support; assume it's compliant with Ecma-48
	# (ISO/IEC-6429). (Lack of such support is extremely rare, and such
	# a case would tend to support setf rather than setaf.)
	color_prompt=yes
    else
	color_prompt=
    fi
fi

if [ "$color_prompt" = yes ]; then
    PS1='${debian_chroot:+($debian_chroot)}\[\033[01;32m\]\u@\h\[\033[00m\]:\[\033[01;34m\]\w\[\033[00m\]\$ '
else
    PS1='${debian_chroot:+($debian_chroot)}\u@\h:\w\$ '
fi
unset color_prompt force_color_prompt

# If this is an xterm set the title to user@host:dir
case "$TERM" in
xterm*|rxvt*)
    PS1="\[\e]0;${debian_chroot:+($debian_chroot)}\u@\h: \w\a\]$PS1"
    ;;
*)
    ;;
esac

# enable color support of ls and also add handy aliases
if [ -x /usr/bin/dircolors ]; then
    test -r ~/.dircolors && eval "$(dircolors -b ~/.dircolors)" || eval "$(dircolors -b)"
    alias ls='ls --color=auto'
    #alias dir='dir --color=auto'
    #alias vdir='vdir --color=auto'

    alias grep='grep --color=auto'
    alias fgrep='fgrep --color=auto'
    alias egrep='egrep --color=auto'
fi

stty -ixon

# some more ls aliases
alias ll='ls -alF'
alias la='ls -A'
alias l='ls -CF'

# Add an "alert" alias for long running commands.  Use like so:
#   sleep 10; alert
alias alert='notify-send --urgency=low -i "$([ $? = 0 ] && echo terminal || echo error)" "$(history|tail -n1|sed -e '\''s/^\s*[0-9]\+\s*//;s/[;&|]\s*alert$//'\'')"'

# Alias definitions.
# You may want to put all your additions into a separate file like
# ~/.bash_aliases, instead of adding them here directly.
# See /usr/share/doc/bash-doc/examples in the bash-doc package.

if [ -f ~/.bash_aliases ]; then
    . ~/.bash_aliases
fi

# enable programmable completion features (you don't need to enable
# this, if it's already enabled in /etc/bash.bashrc and /etc/profile
# sources /etc/bash.bashrc).
if ! shopt -oq posix; then
  if [ -f /usr/share/bash-completion/bash_completion ]; then
    . /usr/share/bash-completion/bash_completion
  elif [ -f /etc/bash_completion ]; then
    . /etc/bash_completion
  fi
fi

# TODO updateme:
# .tar.gz or .tgz --> tar -xvzf
# .tar.bz2 or .tbz --> tar -xvjf
# "dtrx" --> "do the right extraction?"
alias untar='tar -xvzf'

function parse_git_dirty {
  [[ $(git status 2> /dev/null | tail -n1) != "nothing to commit (working directory clean)" ]] && echo "*"
}
function parse_git_branch {
  git branch --no-color 2> /dev/null | sed -e '/^[^*]/d' -e "s/* \(.*\)/[\1$(parse_git_dirty)]/"
}

#PS1='\[\e[0;32m\]\u@\h\[\e[m\] \[\e[0;35m\]$(parse_git_branch)\[\e[m\] \[\e[0;34m\]\w\[\e[m\] \[\e[0;32m\]\$\[\e[m\] \[\e[0;37m\]'
PS1='\[\e[0;35m\]$(parse_git_branch)\[\e[m\] \[\e[0;34m\]\w\[\e[m\] \[\e[0;32m\]\$\[\e[m\] \[\e[0;37m\]'

# COLORS! YAY!
RED='\033[0;31m'
GREEN='\033[0;32m'
ORANGE='\033[0;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
NC='\033[0m'

# Shorthand for useful commands
alias helpme='echo -e "GUIDE: ${CYAN}Tool, ${GREEN}command, ${BLUE}required args, ${PURPLE}opt args${NC}...
    ${CYAN}Git${NC} Commands:
        ${CYAN}git${NC} ${GREEN}cl lint${NC} -- ${RED}Lint your CL${NC}
        ${CYAN}git${NC} ${GREEN}cl try${NC} -- ${RED}Use trybot on CL${NC}
        ${CYAN}git${NC} ${GREEN}cl upload${NC} -- ${RED}Upload your CL${NC}
        ${CYAN}git${NC} ${GREEN}cl help ${PURPLE}<command>${NC} -- ${RED}Get more git cl help${NC}
        ${CYAN}git${NC} ${GREEN}pull origin${NC} -- ${RED}Pull new changes to master${NC}
        ${GREEN}gclient sync${NC} -- ${RED}Update deps${NC}
        ${CYAN}git${NC} ${GREEN}rebase-update${NC} -- ${RED}Pull new changes to all branches.${NC}
        ${CYAN}git${NC} ${GREEN}nb/tb ${BLUE}<branch_name>${NC} -- ${RED}Create new
               branch/CL from origin/master. (tb -- current)${NC}
               Commit as much as you want to this branch. Upload to post for
               code review. Checkout base branch (either master or CL1, if new
               CL will depend on CL1) and use the ${PURPLE}--upstream_current
               ${NC}argument, which is default origin/master.
        ${CYAN}git${NC} ${GREEN}map${NC} -- ${RED}View map of commits${NC}
        ${CYAN}git${NC} ${GREEN}map-branches${NC} -- ${RED}View map of branches${NC}
        ${CYAN}git${NC} ${GREEN}grep stringpattern -- "filepattern"${NC}
    ${CYAN}scons${NC} Commands:
        ${CYAN}./scons -j32${NC} -- ${RED}Build NaCl${NC}
        ${CYAN}./scons MODE=opt-linux,nacl small_tests${NC} -- ${RED}Run tests${NC}
    ${CYAN}Macros:${NC}
        ${CYAN}nvs ${BLUE}<number>${NC} -- ${RED}Set NACLVERBOSITY level${NC}
    ${CYAN}SSH Stuff:${NC}
        ${CYAN}ssh${NC} ${BLUE}<slave name>${GREEN}.golo${NC} -- ${RED}SSH${NC}
        ${CYAN}make stop${NC} -- ${RED}STOP machine from being used by others.${NC}
        ${CYAN}make start${NC} -- ${RED}GIVE machine back to others.${NC}
        ${CYAN}git${NC} ${GREEN}cl patch${NC} ${BLUE}<Issue num>${NC} -- ${RED} Apply patch to current machine.${NC}
    ${CYAN}Shortcuts:${NC}
        ${CYAN}nacldir${NC}
        ${CYAN}google3${NC}
        ${CYAN}ff / gff / gcm / gdf${NC}
"'

# nvz = "nacl verbosity zero". nvs = "nacl verbosity set".
alias nvz='export NACLVERBOSITY=0; echo $NACLVERBOSITY'
function nvs {
    export NACLVERBOSITY=$1
    echo $NACLVERBOSITY
}

# Find filename
alias ff='find . | grep'
alias gff='git ls-files | grep'

alias filesize='stat --printf="%s"'

function md5() {
  echo `md5sum $1 | awk '{ print $1 }'`
}

# Git aliases
function gcm() { git commit -a -m "$*" ;}
alias gdfno='git diff origin/master --name-only'
alias gdfns='git diff origin/master --name-status'
alias gb='git branch'
function gdf() { # Git diff file
  fileNum=0
  IFS_ORIGINAL=$IFS
  if [ "$#" -eq 1 ]; then
    IFS=$'\n'
    for f in $(gdfno)
    do
      if [ "$1" == "$fileNum" ]; then
        toplevel=$(git rev-parse --show-toplevel)
        vim "$toplevel/$f"
      fi
      fileNum=$((fileNum + 1))
    done
  fi
  if [ "$#" -eq 0 ]; then
    IFS=$'\n'
    for f in $(gdfns)
    do
      IFS=$' \t\n'
      fileArray=($f)
      modStatus=${fileArray[0]}
      fileName=${fileArray[1]}
      if [ "$modStatus" = "M" ]; then
        echo -e "[$fileNum] ${CYAN}$fileName${NC}"
      elif [ "$modStatus" = "A" ]; then
        echo -e "[$fileNum] ${GREEN}$fileName${NC}"
      elif [ "$modStatus" = "D" ]; then
        echo -e "[$fileNum] ${RED}$fileName${NC}"
      else
        echo -e "[$fileNum] ${PURPLE}$fileName${NC}"
      fi
      fileNum=$((fileNum + 1))
    done
  fi
  IFS=$IFS_ORIGINAL
}

alias gsbno='git branch --list'
function gsb() { # Git select branch
  branchNum=0
  IFS_ORIGINAL=$IFS
  if [ "$#" -eq 1 ]; then
    IFS=$'\n'
    for b in $(gsbno)
    do
      b=`echo $b | cut -c 3-`
      if [ "$1" == "$branchNum" ]; then
        git checkout $b
      fi
      branchNum=$((branchNum + 1))
    done
  fi
  if [ "$#" -eq 0 ]; then
    IFS=$'\n'
    for b in $(gsbno)
    do
      IFS=$'\n'
      color=${CYAN}
      if [[ ${b:0:1} == "*" ]]; then
        color=${GREEN}
      fi
      b=`echo $b | cut -c 3-`
      echo -e "[$branchNum] ${color}$b${NC}"
      branchNum=$((branchNum + 1))
    done
  fi
  IFS=$IFS_ORIGINAL
}

function goto() {
  # Forward all arguments to the python script, and save the output code.
  output=$(python ~/smkleinrc/scripts/goto.py "$@")
  result=$?
  if [ $result -eq 1 ]; then
    # Exit code 1 means "cd to the directory on stdout"
    eval cd "$output"
  elif [ $result -eq 2 ]; then
    # Exit code 2 means "open the link on stdout"
    google-chrome "$output"
  else
    # Anything else is just dumped to stdout, as it is informative.
    echo -e "$output"
  fi
}


# Colored manpages
export LESS_TERMCAP_mb=$'\E[01;31m'
export LESS_TERMCAP_md=$'\E[01;31m'
export LESS_TERMCAP_me=$'\E[0m'
export LESS_TERMCAP_se=$'\E[0m'
export LESS_TERMCAP_so=$'\E[01;44;33m'
export LESS_TERMCAP_ue=$'\E[0m'
export LESS_TERMCAP_us=$'\E[01;32m'

